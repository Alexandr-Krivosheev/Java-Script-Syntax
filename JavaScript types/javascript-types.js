"use strict";

//Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.
//Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.
//Кроме обычных чисел, существуют так называемые «специальные числовые значения»,
// которые относятся к этому типу данных: Infinity, -Infinity и NaN.
const num = 15;
const float = 16.4356;

//BigInt
//В JavaScript тип «number» не может содержать числа больше, чем 2^53 (или меньше, чем -2^53 для отрицательных).
// Это техническое ограничение вызвано их внутренним представлением. 2^53 – это достаточно большое число,
// состоящее из 16 цифр, поэтому чаще всего проблем не возникает. Но иногда нам нужны действительно гигантские числа,
// например в криптографии или при использовании метки времени («timestamp») с микросекундами.
//Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.
//Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала
const long = 1234567890123456789012345678901234567890n;

//Строка (string) в JavaScript должна быть заключена в кавычки.
//В JavaScript существует три типа кавычек.
// Двойные кавычки: "Привет".
// Одинарные кавычки: 'Привет'.
// Обратные кавычки: `Привет`.
// Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.
// Обратные кавычки же имеют «расширенную функциональность». Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:
const str = 'Hello Mr. Trust';
const strTwo = "What time is it now?";
const name = 'Trust';
const sayHi = `Hello Mr.${name}`;
//Выражение внутри ${…} вычисляется, и его результат становится частью строки.
//Мы можем положить туда всё, что угодно: переменную name или выражение 1 + 2, или что-то более сложное.

//Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).
//Такой тип, как правило, используется для хранения значений да/нет: true значит «да, правильно», а false значит «нет, не правильно».
let isItTrue = true;
let isItFalse = false;
let variableBool = 5 < 4; // Будет false

//Специальное значение null не относится ни к одному из типов, описанных выше.
//Оно формирует отдельный тип, который содержит только значение null
//В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.
//Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
//В приведённом выше коде указано, что переменная age неизвестна или не имеет значения по какой-то причине.
const isNull = null;
console.log(undeclared); //Если ссылаться на необьявленную переменную

//Специальное значение undefined также стоит особняком. Оно формирует тип из самого себя так же, как и null.
//Оно означает, что «значение не было присвоено».
//Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined
let x; //значение не присвоенно

//Тип object (объект) – особенный.
//Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения
// (будь то строка или число, или что-то ещё).
//Объекты же используются для хранения коллекций данных или более сложных объектов.
const obj = new Object(); //Устаревшая декларация
const objSecond = {
    name: 'Trust',
    age: 23,
    city: 'Saratov',
    books: {
        Orwell: 1984,
        Azimov: 'Foundation',
    },
    array: ['React', 'Vue', 'Angular'],
    areYouGay: false,
}
//Тип symbol (символ) используется для создания уникальных идентификаторов объектов.
const id = Symbol("id");

//Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим обрабатывать значения различных типов по-разному или просто хотим сделать проверку.
//У него есть два синтаксиса:
//Синтаксис оператора: typeof x.
//Синтаксис функции: typeof(x).
console.log(typeof 3422);
console.log(typeof objSecond)
console.log(typeof(str));

// В JavaScript есть 8 основных типов.
//
//     number для любых чисел: целочисленных или чисел с плавающей точкой, целочисленные значения ограничены диапазоном ±253.
//     bigint для целых чисел произвольной длины.
//     string для строк. Строка может содержать один или больше символов, нет отдельного символьного типа.
//     boolean для true/false.
//     null для неизвестных значений – отдельный тип, имеющий одно значение null.
//     undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
//     object для более сложных структур данных.
//     symbol для уникальных идентификаторов.
//     Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.
//
//     Имеет две формы: typeof x или typeof(x).
//     Возвращает строку с именем типа. Например, "string".
//     Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.
